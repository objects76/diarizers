{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66acfbc4-13ff-44c0-97f4-6a4c9aeae4a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[91mload base model\u001b[0m\n",
      "\u001b[94mSpecifications(problem=<Problem.MONO_LABEL_CLASSIFICATION: 1>, resolution=<Resolution.FRAME: 1>, duration=2.25, min_duration=None, warm_up=(0.0, 0.0), classes=['speaker#1', 'speaker#2'], powerset_max_classes=2, permutation_invariant=True)\u001b[0m\n",
      "\u001b[92mPyanNet(\n",
      "  (sincnet): SincNet(\n",
      "    (wav_norm1d): InstanceNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n",
      "    (conv1d): ModuleList(\n",
      "      (0): Encoder(\n",
      "        (filterbank): ParamSincFB()\n",
      "      )\n",
      "      (1): Conv1d(80, 60, kernel_size=(5,), stride=(1,))\n",
      "      (2): Conv1d(60, 60, kernel_size=(5,), stride=(1,))\n",
      "    )\n",
      "    (pool1d): ModuleList(\n",
      "      (0-2): 3 x MaxPool1d(kernel_size=3, stride=3, padding=0, dilation=1, ceil_mode=False)\n",
      "    )\n",
      "    (norm1d): ModuleList(\n",
      "      (0): InstanceNorm1d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n",
      "      (1-2): 2 x InstanceNorm1d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n",
      "    )\n",
      "  )\n",
      "  (lstm): LSTM(60, 128, num_layers=4, batch_first=True, dropout=0.5, bidirectional=True)\n",
      "  (linear): ModuleList(\n",
      "    (0): Linear(in_features=256, out_features=128, bias=True)\n",
      "    (1): Linear(in_features=128, out_features=128, bias=True)\n",
      "  )\n",
      "  (classifier): Linear(in_features=128, out_features=4, bias=True)\n",
      "  (activation): LogSoftmax(dim=-1)\n",
      ")\u001b[0m\n",
      "sincnet={'ksize': 251, 'stride': 10, 'frame_sec': 0.10384}\n",
      "SincNetPool: pool_kernel=6/6.000, pool_stride=6, frame_sec=0.10384\n",
      "diar.specifications.problem Problem.MONO_LABEL_CLASSIFICATION\n",
      "before copy: SincNetPool(\n",
      "  (wav_norm1d): InstanceNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n",
      "  (conv1d): ModuleList(\n",
      "    (0): Encoder(\n",
      "      (filterbank): ParamSincFB()\n",
      "    )\n",
      "    (1): Conv1d(80, 60, kernel_size=(5,), stride=(1,))\n",
      "    (2): Conv1d(60, 60, kernel_size=(5,), stride=(1,))\n",
      "  )\n",
      "  (pool1d): ModuleList(\n",
      "    (0-2): 3 x MaxPool1d(kernel_size=3, stride=3, padding=0, dilation=1, ceil_mode=False)\n",
      "  )\n",
      "  (norm1d): ModuleList(\n",
      "    (0): InstanceNorm1d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n",
      "    (1-2): 2 x InstanceNorm1d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n",
      "  )\n",
      "  (post_pool): AvgPool1d(kernel_size=(6,), stride=(6,), padding=(0,))\n",
      ")\n",
      "\u001b[94mSegmentationModelConfig {\n",
      "  \"_attn_implementation_autoset\": true,\n",
      "  \"chunk_duration\": 2.25,\n",
      "  \"max_speakers_per_chunk\": 2,\n",
      "  \"max_speakers_per_frame\": 2,\n",
      "  \"min_duration\": null,\n",
      "  \"model_type\": \"pyannet\",\n",
      "  \"sample_rate\": 16000,\n",
      "  \"sincnet\": {\n",
      "    \"frame_sec\": 0.10384,\n",
      "    \"ksize\": 251,\n",
      "    \"stride\": 10\n",
      "  },\n",
      "  \"transformers_version\": \"4.51.3\",\n",
      "  \"warm_up\": [\n",
      "    0.0,\n",
      "    0.0\n",
      "  ],\n",
      "  \"weigh_by_cardinality\": false\n",
      "}\n",
      "\u001b[0m\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'SegmentationModel' object has no attribute 'pyannet_nn'",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mAttributeError\u001b[39m                            Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[9]\u001b[39m\u001b[32m, line 60\u001b[39m\n\u001b[32m     53\u001b[39m model = SegmentationModel.from_pyannote_model(\n\u001b[32m     54\u001b[39m     basemodel,\n\u001b[32m     55\u001b[39m     with_weight=WITH_PYANNET_WEIGHT, \u001b[38;5;66;03m# with gaussian init.\u001b[39;00m\n\u001b[32m     56\u001b[39m     sincnet = sincnet,\n\u001b[32m     57\u001b[39m     )\n\u001b[32m     59\u001b[39m \u001b[38;5;28mprint\u001b[39m(model.config | blue)\n\u001b[32m---> \u001b[39m\u001b[32m60\u001b[39m \u001b[38;5;28mprint\u001b[39m(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[43mmodel\u001b[49m\u001b[43m.\u001b[49m\u001b[43mpyannet_nn\u001b[49m.classifier\u001b[38;5;132;01m= }\u001b[39;00m\u001b[33m\"\u001b[39m|green)\n\u001b[32m     61\u001b[39m \u001b[38;5;28mprint\u001b[39m(model) \u001b[38;5;66;03m# SincNet > Bi-LSTM > classifier\u001b[39;00m\n\u001b[32m     63\u001b[39m \u001b[38;5;66;03m# save base model\u001b[39;00m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/miniconda3/envs/pyan-ft/lib/python3.11/site-packages/torch/nn/modules/module.py:1928\u001b[39m, in \u001b[36mModule.__getattr__\u001b[39m\u001b[34m(self, name)\u001b[39m\n\u001b[32m   1926\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01min\u001b[39;00m modules:\n\u001b[32m   1927\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m modules[name]\n\u001b[32m-> \u001b[39m\u001b[32m1928\u001b[39m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\n\u001b[32m   1929\u001b[39m     \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m).\u001b[34m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m'\u001b[39m\u001b[33m object has no attribute \u001b[39m\u001b[33m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m'\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m   1930\u001b[39m )\n",
      "\u001b[31mAttributeError\u001b[39m: 'SegmentationModel' object has no attribute 'pyannet_nn'"
     ]
    }
   ],
   "source": [
    "print('load base model'|red)\n",
    "from pyannote.audio.models.segmentation.PyanNet import PyanNet\n",
    "from pyannote.audio.core.task import Specifications\n",
    "from pyannote.audio import Model\n",
    "from diarizers import SegmentationModel\n",
    "import torch.nn as nn\n",
    "import torch\n",
    "\n",
    "\n",
    "TRAIN_CHUNK_DURATION = 2.25 # train duration\n",
    "WITH_PYANNET_WEIGHT = True\n",
    "\n",
    "if WITH_PYANNET_WEIGHT:\n",
    "    sincnet = {\n",
    "        \"ksize\": 251,\n",
    "        \"stride\": 10,\n",
    "        \"frame_sec\": 0.10384,\n",
    "    }\n",
    "else:\n",
    "    sincnet = {\n",
    "        \"ksize\": 321,\n",
    "        \"stride\": 56,\n",
    "        \"frame_sec\": 0,\n",
    "    }\n",
    "\n",
    "def get_base_model(duration:float) -> tuple[PyanNet, int]:\n",
    "    model_id = \"pyannote/segmentation-3.0\"\n",
    "    base_model:PyanNet = Model.from_pretrained(model_id,) # type: ignore\n",
    "    specifications:Specifications = base_model.specifications # type: ignore\n",
    "    specifications.duration = duration\n",
    "\n",
    "    # limit output as 2 speaker only.\n",
    "    specifications.classes = ['speaker#1', 'speaker#2']\n",
    "    old_linear = base_model.classifier        # None,A,B,C,AB,AC,BC\n",
    "    new_linear = nn.Linear(128, 4, bias=True) # Linear(128 -> 4), None, A,B,AB\n",
    "    indices = [0, 1, 2, 4] # None, A, B, AB\n",
    "    with torch.no_grad():\n",
    "        # Copy weights/biases for the first 4 outputs\n",
    "        new_linear.weight.copy_(old_linear.weight[indices, :])\n",
    "        new_linear.bias.copy_(old_linear.bias[indices])\n",
    "    base_model.classifier = new_linear\n",
    "\n",
    "    print(specifications|blue)\n",
    "    print(base_model|green)\n",
    "\n",
    "    _, num_frames_per_chunk, _ = base_model( torch.rand((1, int(duration * 16000))) ).shape\n",
    "    # print(f\"PyanNet: {num_frames_per_chunk=} for {duration=:.3f}\"|red)\n",
    "\n",
    "    return base_model, num_frames_per_chunk\n",
    "\n",
    "basemodel, n_basemodel_frames = get_base_model(duration = TRAIN_CHUNK_DURATION)\n",
    "model = SegmentationModel.from_pyannote_model(\n",
    "    basemodel,\n",
    "    with_weight=WITH_PYANNET_WEIGHT, # with gaussian init.\n",
    "    sincnet = sincnet,\n",
    "    )\n",
    "\n",
    "print(model.config | blue)\n",
    "print(f\"{model.pyan_nn.classifier= }\"|green)\n",
    "print(model) # SincNet > Bi-LSTM > classifier\n",
    "\n",
    "# save base model\n",
    "basemodel_dir = Path('basemodel')\n",
    "basemodel_dir.mkdir(exist_ok=True)\n",
    "model.save_pretrained(basemodel_dir)\n",
    "\n",
    "nn_model = model.pyan_nn\n",
    "_, num_frames_per_chunk, _ = nn_model( torch.rand((1, int(TRAIN_CHUNK_DURATION * 16000))) ).shape\n",
    "\n",
    "print(f\"{type(nn_model)}\"|green)\n",
    "print(f\"{TRAIN_CHUNK_DURATION=}, {WITH_PYANNET_WEIGHT=}, {num_frames_per_chunk=}, {n_basemodel_frames=}\" | red)\n",
    "\n",
    "#---------------------------------------------------------------------"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pyan-ft",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
